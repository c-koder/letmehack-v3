import React, { useState, useEffect, useRef } from 'react';

const InfiniteSlider = () => {
    const [position, setPosition] = useState(0);
    const directionRef = useRef('right');
    const lastChangeTimeRef = useRef(Date.now());

    const images = [
        { url: "/api/placeholder/400/300", alt: "Slide 1" },
        { url: "/api/placeholder/400/300", alt: "Slide 2" },
        { url: "/api/placeholder/400/300", alt: "Slide 3" },
        { url: "/api/placeholder/400/300", alt: "Slide 4" },
        // Duplicate images for seamless transition
        { url: "/api/placeholder/400/300", alt: "Slide 1" },
        { url: "/api/placeholder/400/300", alt: "Slide 2" },
        { url: "/api/placeholder/400/300", alt: "Slide 3" },
        { url: "/api/placeholder/400/300", alt: "Slide 4" },
    ];

    useEffect(() => {
        const DIRECTION_CHANGE_INTERVAL = 5000; // 5 seconds
        const ANIMATION_SPEED = 0.03;

        const animate = () => {
            const currentTime = Date.now();

            // Check for direction change
            if (currentTime - lastChangeTimeRef.current >= DIRECTION_CHANGE_INTERVAL) {
                directionRef.current = directionRef.current === 'right' ? 'left' : 'right';
                lastChangeTimeRef.current = currentTime;
            }

            setPosition(prevPosition => {
                const movement = directionRef.current === 'right' ? -ANIMATION_SPEED : ANIMATION_SPEED;
                let newPosition = prevPosition + movement;

                // Reset position for seamless loop
                if (newPosition <= -50) {
                    newPosition = 0;
                }
                if (newPosition >= 0) {
                    newPosition = -50;
                }

                return newPosition;
            });

            requestAnimationFrame(animate);
        };

        const animationId = requestAnimationFrame(animate);
        return () => cancelAnimationFrame(animationId);
    }, []); // Empty dependency array to run effect only once

    return (
        <div className="w-full overflow-hidden bg-[#01260D]">

            {/* Title Section */}
            <div className="text-center py-8">
                <h2 className="text-2xl text-center font-bold text-[#ffffff] mb-2">Sponsors</h2>
            </div>

            <div className="relative">
                <div
                    className="flex transition-transform duration-100 ease-linear"
                    style={{ transform: `translateX(${position}%)` }}
                >
                    {images.map((image, index) => (
                        <div
                            key={index}
                            className="w-1/4 flex-shrink-0 px-2"
                        >
                            <div className="relative h-64">
                                <img
                                    src={image.url}
                                    alt={image.alt}
                                    className="w-full h-full object-cover rounded-lg shadow-md"
                                />
                                <div className="absolute bottom-0 left-0 right-0 bg-black/50 text-white p-2 rounded-b-lg">
                                    <p className="text-sm text-center">{image.alt}</p>
                                </div>
                            </div>
                        </div>
                    ))}
                </div>
            </div>
        </div>
    );
};

export default InfiniteSlider;